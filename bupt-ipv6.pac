function FindProxyForURL(s, a) {
    if (isPlainHostName(a)) return i;
    var f = a,
    u = 0;
    do {
        if (e.hasOwnProperty(f)) return r; //是否在黑名单
        if (t.hasOwnProperty(f)) return i; //是否在白名单
        u = a.indexOf(".", u) + 1, f = a.substring(u)
    } while ( u > 0 );
    var o = dnsResolveEx(a); //DNS解析
    alert(a+":"+o);
    if (!o) return r; //解析失败
    if(o.indexOf(":") >= 0){
        if (o.indexOf(".") < 0){
            return i; //解析到纯IPV6
        } else{
            return r;
        }
    }
    var l = o.split("."),
    //判断IP是否在ipList
    d = (255 & l[1]) << 8 | 255 & l[2],
    h = l[0],
    v = _[h],
    w = n[h];
    if (0 === v) return r;
    if (16 === w) return i;
    var L = 0,
    p = v.length,
    O = p >> 1;
    do v[O] > d ? p = O: L = O,
    O = L + p >> 1;
    while (L + 1 < p);
    return d - v[L] >> w[L] === 0 ? i: r
}
var r = "SOCKS5 127.0.0.1:9999",
i = "DIRECT",
t = { //白名单
    "byr.cn": 1,
    "bupt.edu.cn": 1,
    "youtube.com": 1,
    "googlevideo.com": 1
},
e = { //黑名单
    "github.com": 1
},
_ = [[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, [0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [65024], 0, 0, [4096], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0, 2, 22627, 43008], 0, 0, 0, 0, 0, [4608, 13156], 0, 0, 0, 0, [113], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],
n = [[16], 0, 0, 0, 0, 0, 0, 0, 0, 0, [16], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [16], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [8], 0, 0, [12], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0, 0, 0, 8], 0, 0, 0, 0, 0, [9, 0], 0, 0, 0, 0, [0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16], [16]];
